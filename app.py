from flask import Flask, request, send_file, jsonify, render_template, after_this_request
import yt_dlp
import os
import uuid
import tempfile
import json
import base64
import re

app = Flask(__name__)

# Au lieu d'utiliser un fichier cookies.txt, nous allons créer les cookies directement
# à partir d'une variable d'environnement ou d'une valeur codée en dur temporairement

# IMPORTANT: Remplacez cette valeur par vos propres cookies YouTube
# Format: {"cookie_name": "cookie_value", "cookie_name2": "cookie_value2", ...}
# Exemple minimal requis pour YouTube:
YOUTUBE_COOKIES = os.environ.get("YOUTUBE_COOKIES", """{
    "CONSENT": "YES+cb",
    "VISITOR_INFO1_LIVE": "votre_valeur_ici",
    "LOGIN_INFO": "votre_valeur_ici", 
    "SID": "votre_valeur_ici",
    "HSID": "votre_valeur_ici",
    "SSID": "votre_valeur_ici",
    "APISID": "votre_valeur_ici",
    "SAPISID": "votre_valeur_ici"
}""")

def create_cookies_file():
    """Crée un fichier de cookies à partir des cookies en JSON"""
    try:
        # Créer un fichier temporaire pour les cookies
        cookies_file = tempfile.mktemp(suffix='.txt')
        
        # Charger les cookies JSON
        cookies_dict = json.loads(YOUTUBE_COOKIES)
        
        # Écrire les cookies au format Netscape
        with open(cookies_file, 'w') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# https://curl.se/docs/http-cookies.html\n")
            f.write("# This file was generated by Flask app! Edit at your own risk.\n\n")
            
            for name, value in cookies_dict.items():
                # Format: domain flag path secure expiry name value
                f.write(f".youtube.com\tTRUE\t/\tTRUE\t1700000000\t{name}\t{value}\n")
                
        return cookies_file
    except Exception as e:
        app.logger.error(f"Erreur lors de la création du fichier cookies: {e}")
        return None

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/info', methods=['POST'])
def video_info():
    """
    Récupère les informations de la vidéo YouTube à partir de l'URL fournie.
    """
    data = request.json
    url = data.get('url')
    if not url:
        return jsonify({'error': 'No URL provided'}), 400
    
    # Créer un fichier de cookies temporaire
    cookies_file = create_cookies_file()
    
    ydl_opts = {
        'quiet': True,
        'skip_download': True,
        'no_warnings': False,
        'verbose': True,  # Pour voir les messages d'erreur complets
    }
    
    if cookies_file:
        ydl_opts['cookiefile'] = cookies_file
    
    # Ajouter l'option pour contourner la limite d'âge
    ydl_opts['age_limit'] = 99
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # Tentative avec proxy youtube-nocookie.com si c'est une URL YouTube
            if 'youtube.com' in url or 'youtu.be' in url:
                try:
                    # Essayer d'abord avec l'URL originale
                    info = ydl.extract_info(url, download=False)
                except Exception as e:
                    # Si ça échoue, essayer avec youtube-nocookie.com
                    nocookie_url = re.sub(r'(youtube\.com|youtu\.be)', 'youtube-nocookie.com', url)
                    info = ydl.extract_info(nocookie_url, download=False)
            else:
                info = ydl.extract_info(url, download=False)
            
            formats = [{
                'format_id': f['format_id'],
                'ext': f['ext'],
                'resolution': f.get('resolution') or f.get('height', ''),
                'format_note': f.get('format_note', ''),
                'filesize': f.get('filesize') or 0
            } for f in info.get('formats', []) if f.get('vcodec') != 'none' or f.get('acodec') != 'none']
            
            # Supprimer le fichier de cookies temporaire
            if cookies_file and os.path.exists(cookies_file):
                os.remove(cookies_file)
                
            return jsonify({
                'title': info['title'],
                'thumbnail': info['thumbnail'],
                'duration': info['duration'],
                'formats': formats
            })
    except Exception as e:
        # Supprimer le fichier de cookies temporaire en cas d'erreur
        if cookies_file and os.path.exists(cookies_file):
            os.remove(cookies_file)
            
        error_msg = str(e)
        # Si c'est une erreur de bot, suggérer des solutions
        if "Sign in to confirm you're not a bot" in error_msg:
            return jsonify({
                'error': f"YouTube requiert une authentification plus récente. Erreur complète: {error_msg}",
                'solutions': [
                    "Mettez à jour les cookies dans la variable d'environnement YOUTUBE_COOKIES",
                    "Essayez d'utiliser un VPN ou de changer d'adresse IP",
                    "Considérez d'utiliser l'API YouTube officielle à la place"
                ]
            }), 500
        return jsonify({'error': str(e)}), 500

@app.route('/download', methods=['POST'])
def download_video():
    """
    Télécharge la vidéo YouTube en utilisant yt-dlp avec les cookies générés.
    """
    data = request.json
    url = data.get('url')
    format_id = data.get('format_id')
    
    if not url or not format_id:
        return jsonify({'error': 'Missing URL or format_id'}), 400
    
    # Créer un dossier temporaire pour le téléchargement
    temp_dir = tempfile.mkdtemp()
    filename = f"video_{uuid.uuid4().hex}.mp4"
    output_path = os.path.join(temp_dir, filename)
    
    # Créer un fichier de cookies temporaire
    cookies_file = create_cookies_file()
    
    ydl_opts = {
        'format': format_id,
        'outtmpl': output_path,
        'verbose': True,
        'no_warnings': False,
        'age_limit': 99,  # Pour les vidéos avec restriction d'âge
    }
    
    if cookies_file:
        ydl_opts['cookiefile'] = cookies_file
    
    # Ajouter des options anti-bot
    ydl_opts['extractor_args'] = {
        'youtube': {
            'player_client': ['android', 'web'],  # Essayer différents clients
            'player_skip': ['js', 'configs']  # Sauter certaines vérifications
        }
    }
    
    try:
        # Essayer d'abord avec l'URL normale
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                ydl.download([url])
        except Exception as e:
            # Si ça échoue et que c'est une URL YouTube, essayer avec youtube-nocookie
            if 'youtube.com' in url or 'youtu.be' in url:
                nocookie_url = re.sub(r'(youtube\.com|youtu\.be)', 'youtube-nocookie.com', url)
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    ydl.download([nocookie_url])
            else:
                raise e
        
        @after_this_request
        def remove_files(response):
            try:
                if os.path.exists(output_path):
                    os.remove(output_path)
                if cookies_file and os.path.exists(cookies_file):
                    os.remove(cookies_file)
            except Exception as ex:
                app.logger.error(f"Error removing files: {ex}")
            return response
            
        return send_file(output_path, as_attachment=True, download_name=filename)
    except Exception as e:
        # Supprimer les fichiers temporaires en cas d'erreur
        if os.path.exists(output_path):
            os.remove(output_path)
        if cookies_file and os.path.exists(cookies_file):
            os.remove(cookies_file)
            
        return jsonify({'error': str(e)}), 500

@app.route('/test_cookies')
def test_cookies():
    """
    Teste si les cookies sont valides pour YouTube
    """
    cookies_file = create_cookies_file()
    if not cookies_file:
        return jsonify({'error': 'Impossible de créer le fichier de cookies'}), 500
    
    # URL de test YouTube (une vidéo sans restriction)
    test_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    
    ydl_opts = {
        'quiet': True,
        'skip_download': True,
        'cookiefile': cookies_file,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(test_url, download=False)
            
            # Supprimer le fichier de cookies temporaire
            if os.path.exists(cookies_file):
                os.remove(cookies_file)
                
            return jsonify({
                'success': True,
                'message': 'Les cookies fonctionnent correctement',
                'video_title': info['title']
            })
    except Exception as e:
        # Supprimer le fichier de cookies temporaire en cas d'erreur
        if os.path.exists(cookies_file):
            os.remove(cookies_file)
            
        return jsonify({
            'success': False,
            'message': 'Les cookies ne fonctionnent pas correctement',
            'error': str(e)
        }), 500

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))
